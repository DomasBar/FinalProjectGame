import pygame as pg

_ = False
mini_map = [
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "_", "P", "_", "1", "_", "1", "_", "1", "_", "2", "_", "_", "_", "1", "1", "_", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "1", "_", "1", "1", "_", "1", "_", "1", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "2", "_", "1", "_", "1", "_", "1", "_", "1"],
    ["1", "_", "_", "_", "1", "_", "_", "_", "_", "_", "2", "_", "2", "2", "2", "2", "_", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "1", "_", "1", "1", "_", "_", "_", "_", "_", "2", "2", "2", "_", "_", "2", "2", "2", "_", "_", "_", "2", "_", "_", "1", "_", "1", "_", "_", "1"],
    ["1", "_", "_", "_", "1", "1", "_", "_", "_", "2", "2", "2", "_", "_", "_", "_", "2", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "1", "_", "1", "1", "_", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "2", "_", "1", "_", "1", "_", "1", "_", "1"],
    ["1", "_", "_", "_", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "2", "2", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "1", "_", "1", "_", "_", "1"],
    ["1", "2", "2", "2", "2", "_", "_", "2", "2", "2", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "2", "2", "_", "_", "2", "_", "_", "2", "_", "_", "_", "_", "_", "_", "2", "2", "2", "2", "2", "_", "1", "_", "1", "_", "1", "_", "1"],
    ["1", "_", "_", "_", "_", "_", "1", "_", "_", "_", "2", "_", "_", "_", "2", "2", "_", "2", "1", "1", "1", "2", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "1", "1", "1", "1", "1", "_", "_", "_", "2", "_", "_", "2", "2", "_", "_", "2", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "2", "_", "_", "2", "2", "_", "_", "2", "_", "_", "_", "2", "2", "2", "2", "2", "2", "2", "_", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "2", "_", "2", "2", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "2", "_", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "2", "_", "_", "2", "_", "1"],
    ["1", "_", "2", "2", "2", "_", "1", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "2", "_", "2", "_", "2", "_", "2", "_", "2", "_", "1"],
    ["1", "_", "2", "_", "2", "_", "1", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "2", "_", "_", "_", "2", "_", "1"],
    ["1", "_", "_", "_", "2", "_", "1", "_", "2", "_", "2", "2", "_", "_", "_", "_", "2", "2", "2", "_", "2", "2", "_", "2", "_", "2", "_", "2", "_", "1"],
    ["1", "_", "_", "_", "2", "_", "1", "_", "2", "_", "2", "2", "2", "_", "_", "2", "2", "2", "_", "_", "_", "2", "_", "2", "_", "2", "_", "2", "_", "1"],
    ["1", "_", "_", "_", "2", "_", "1", "_", "2", "_", "2", "_", "_", "_", "2", "2", "_", "2", "_", "_", "_", "2", "_", "2", "_", "2", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "_", "1", "_", "2", "_", "2", "_", "2", "2", "_", "2", "_", "2", "2", "_", "2", "2", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "2", "2", "2", "2", "_", "1", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "2", "_", "_", "2", "_", "2", "_", "2", "_", "_", "_", "2", "2", "2", "2", "2", "2", "2", "2", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "2", "2", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "2", "_", "_", "2", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "_", "1", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "_", "1", "_", "2", "_", "2", "_", "_", "2", "_", "2", "_", "2", "_", "_", "_", "2", "_", "2", "2", "_", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "_", "1", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "2", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "2", "2", "2", "2", "_", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "2", "2", "2", "2", "2", "2", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "_", "_", "2", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "_", "_", "_", "1", "_", "2", "_", "_", "_", "2", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "2", "2", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "2", "2", "2", "1", "_", "2", "2", "_", "_", "2", "2", "_", "2", "2", "2", "_", "_", "_", "2", "_", "_", "2", "_", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "2", "_", "2", "2", "_", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "2", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "2", "_", "2", "_", "_", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "2", "2", "_", "_", "2", "2", "2", "2", "_", "2", "_", "_", "_", "2", "_", "2", "2", "_", "2", "_", "_", "1"],
    ["1", "2", "2", "2", "2", "2", "1", "1", "2", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "2", "_", "2", "_", "_", "_", "_", "2", "2", "_", "1"],
    ["1", "_", "_", "_", "_", "2", "1", "1", "2", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "2", "1", "1", "2", "2", "_", "_", "2", "2", "_", "2", "2", "2", "_", "_", "2", "2", "2", "_", "2", "_", "2", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "2", "1", "1", "2", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "2", "_", "2", "1", "1", "2", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "2", "_", "_", "2", "2", "2", "2", "_", "_", "_", "1"],
    ["1", "_", "2", "2", "_", "2", "2", "2", "2", "2", "_", "_", "2", "2", "2", "2", "_", "2", "_", "2", "_", "_", "2", "_", "_", "2", "_", "_", "_", "1"],
    ["1", "_", "2", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "2", "2", "_", "2", "2", "2", "_", "_", "_", "_", "_", "2", "2", "2", "_", "2", "_", "2", "_", "_", "2", "_", "_", "2", "_", "_", "_", "1"],
    ["1", "_", "2", "2", "_", "2", "1", "1", "1", "_", "2", "2", "2", "2", "_", "_", "_", "2", "_", "2", "_", "_", "2", "2", "2", "2", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "2", "1", "1", "_", "_", "_", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "2", "1", "1", "_", "_", "_", "_", "_", "_", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "_", "_", "_", "_", "2", "1", "1", "_", "_", "_", "_", "_", "2", "_", "_", "_", "2", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
]

class Map:
    def __init__(self, game):
        self.game = game
        self.mini_map = mini_map
        self.world_map = {}
        self.world_empty_space = 0
        self.get_map()

    def get_map(self):
        for j, row in enumerate(self.mini_map):
            for i, value in enumerate(row):
                if value == "1" or value == "2":
                    self.world_map[(i, j)] = int(value)
                elif value == "P":
                    self.game.player.set_spawn(j + 1.5, i - 0.5)
                elif value == '_':
                    self.world_empty_space = self.world_empty_space + 1
#     WORLD TEST
    def draw(self):
        [pg.draw.rect(self.game.screen, 'darkgray', (pos[0] * 100, pos[1] * 100, 100, 100), 2)
         for pos in self.world_map]

    def isWall(self, x, y):
        if (x, y) in self.world_map:
            return True

    def get_size(self):
        xy_size = list(self.world_map.keys())[-1]
        x_size = xy_size[0]
        y_size = xy_size[1]
        return x_size, y_size
